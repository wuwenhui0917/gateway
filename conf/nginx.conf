worker_processes  4;

events {
    worker_connections  4096;
}

# optional: path of gateway.conf
env GATE_CONF;

http {
    resolver 114.114.114.114; # replace it with your favorite config
    charset UTF-8;
    include ./mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$request_time" "$ssl_protocol" "$ssl_cipher" "$http_x_forwarded_for"'
    '"$upstream_addr" "$upstream_status" "$upstream_response_length" "$upstream_response_time"';

    access_log  ./logs/access.log  main;
    error_log ./logs/error.log info;

    sendfile        on;
    keepalive_timeout  65;

    upstream default_upstream {
        server localhost:9001;
    }

    upstream a_upstream {
        server localhost:9002;
    }


    #----------------------------gateway configuration-----------------------------
    lua_package_path '/home/wuwenhui/works/lua/gateway/gateway/lor/?.lua;/home/wuwenhui/software/openresty/lualib/?.lua;../?.lua;/usr/local/lor/?.lua;;';
    lua_code_cache on;

    lua_shared_dict gateway_data 20m; # should not removed. used for gateway data, e.g. plugins configurations..

    lua_shared_dict status 1m; # used for global statistic, see plugin: stat
    lua_shared_dict waf_status 1m; # used for waf statistic, see plugin: waf
    lua_shared_dict monitor 10m; # used for url monitor statistic, see plugin: monitor
    lua_shared_dict rate_limit 10m; # used for rate limiting count, see plugin: rate_limiting
    lua_shared_dict property_rate_limiting 10m; # used for rate limiting count, see plugin: rate_limiting
    lua_shared_dict healthcheck 1m;
    lua_socket_log_errors off;


    init_by_lua_block {
        local gateway = require("gateway.gateway")
        local env_gateway_conf = os.getenv("GATEWAY_CONF")
        print(string.char(27) .. "[34m" .. "[INFO]" .. string.char(27).. "[0m", [[the env[gateway_CONF] is ]], env_gateway_conf)

        local config_file = env_gateway_conf or ngx.config.prefix().. "/conf/gateway.conf"
        local config, store = gateway.init({
            config = config_file
        })

        -- the gateway context
        context = {
            gateway = gateway,
            store = store,
            config = config
        }
    }

    init_worker_by_lua_block {
        local gateway = context.gateway
        gateway.init_worker()
        gateway.checkupstream("a_upstream")
        gateway.checkupstream("default_upstream")

    }

    # main server
    server {
        listen       9090;
        #server_name  my_domain.com;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }


        location / {
            set $upstream_host $host;
            set $upstream_url 'http://default_upstream';

            rewrite_by_lua_block {
                local gateway = context.gateway
                gateway.redirect()
                gateway.rewrite()
            }

            access_by_lua_block {
                local gateway = context.gateway
                gateway.access()
            }

            # proxy
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
            proxy_set_header Host $upstream_host;
            proxy_pass $upstream_url;


            header_filter_by_lua_block {
                local gateway = context.gateway
                gateway.header_filter()
            }

            body_filter_by_lua_block {
                local gateway = context.gateway
                gateway.body_filter()
            }

            log_by_lua_block {
                local gateway = context.gateway
                gateway.log()
            }
        }

        location /health {
            return 200 'User-agent: *\nDisallow: /';
        }

        #  location /udate {
        #      access_by_lua_block {
        #         local gateway = context.gateway
        #         gateway.update()
        #     }
            

        # }


    }

    # default upstream server
    server {
        listen 9001;
        server_name localhost 127.0.0.1;
        access_log ./logs/default_upstream_access.log main;
        error_log ./logs/default_upstream_error.log;

        location / {
            content_by_lua_block {
                ngx.status = 404
                ngx.say([[404! upstream not found. Host: ]] .. ngx.var.host .. "  URI: " .. ngx.var.uri)
            }
        }
         location /a {

           #proxy_pass http://127.0.0.1:9999/robots.txt ;
           return 200 '/aaaaaa';

         }
         location /health {

           #proxy_pass http://127.0.0.1:9999/robots.txt ;
           return 200 '/aaaaaa';

         }

    }
    #灰度环境
    server {
        listen 9002;
        server_name localhost 127.0.0.1;
        access_log ./logs/A_upstream_access.log main;
        error_log ./logs/A_upstream_error.log;

        location / {
            content_by_lua_block {
                ngx.status = 200
                ngx.say([[404! upstream not found. Host: ]] .. ngx.var.host .. "  URI: " .. ngx.var.uri)
            }
        }
         location /a {

           #proxy_pass http://127.0.0.1:9999/robots.txt ;
           return 200 '/bbbbbbb';

         }
         location /health {

           #proxy_pass http://127.0.0.1:9999/robots.txt ;
           return 200 '/aaaaaa';

         }


    }


    # gateway dashboard server
    # server {
    #     listen       10999;
    #     stub_status on;
    #     #server_name  localhost;
    #     access_log ./logs/dashboard_access.log main;
    #     error_log ./logs/dashboard_error.log info;

    #     location = /favicon.ico {
    #         log_not_found off;
    #         access_log off;
    #     }

    #     location /robots.txt {
    #         return 200 'User-agent: *\nDisallow: /';
    #     }

    #     # dashboard的静态文件
    #     location ~* /static/(.*) {
    #         alias ./dashboard/static/$1;
    #     }

    #     location / {
    #         set $template_root '';
    #         content_by_lua_block {
    #             context.views_path = ngx.config.prefix() .. "/dashboard/views"
    #             local main = require("dashboard.main")
    #             main:run()
    #         }
    #     }
    # }

   # api server
    server {
        listen       8888;
        #server_name  localhost;
        access_log ./logs/api_access.log main;
        error_log ./logs/api_error.log info;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        location / {
            content_by_lua_block {
                local main = require("api.main")
                main:run()
            }
        }
    }

}
